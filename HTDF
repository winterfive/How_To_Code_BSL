HTDF - How to Design FUnctions

Signature, purpose and stub.
Define examples, wrap each in check-expect.
Template and inventory.
Code the function body.
Test and debug until correct

; 
; PROBLEM:
; 
; Design a function that consumes a number and produces twice that number. 
; Call your function double. Follow the HtDF recipe and leave behind commented 
; out versions of the stub and template.
; 


;; Number -> Number
;; produces 2 times the given number
(check-expect (double 3) 6)
(check-expect (double 4.2) 8.4)

; (define (double n) 0)  ; this is the stub

;(define (double n)
;  (...n))

(define (double n)
  (* 2 n))
  

(require 2htdp/image)
; 
; PROBLEM:
; 
; DESIGN a function that consumes an image and determines whether the 
; image is tall.; 
; Remember, when we say DESIGN, we mean follow the recipe.; 
; Leave behind commented out versions of the stub and template.

;; Image -> Boolean
;; If given image is tall (height is greater than width), return true. Else return false.
(check-expect (tall? (rectangle 2 3 "solid" "red")) true)
(check-expect (tall? (rectangle 3 2 "solid" "red")) false)
(check-expect (tall? (rectangle 2 2 "solid" "red")) false)

;(define (tall? img) false)    ;stub

;(define (tall? img)           ; template
;  (...img))

(define (tall? img)
  (> (image-height img)(image-width img)))
  
  
  
;; HTDF Assignment

(require 2htdp/image)

;; Image Image -> Boolean
;; Return true if 1st image is larger then the 2nd image

(check-expect (larger? (rectangle 4 5 "solid" "blue")
                       (rectangle 2 3 "solid" "red")) true)
(check-expect (larger? (rectangle 2 3 "solid" "red")
                       (square 4 "solid" "blue")) false)
(check-expect (larger? (rectangle 2 3 "solid" "red")
                       (rectangle 2 3 "solid" "blue")) false)

;(define (larger? img1 img2) false)      ; stub

;(define (larger? img1 img2)           ; template
;  (...img1 img2))

(define (larger? img1 img2)
  (> (* (image-width img1) (image-height img1))
     (* (image-width img2) (image-height img2))))
